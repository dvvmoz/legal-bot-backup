"""
–ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ (LLM).
"""
import logging
from typing import List, Dict, Any
from datetime import datetime
from openai import OpenAI
from config import OPENAI_API_KEY, DEFAULT_MODEL, MAX_TOKENS
from .scraping_tracker import get_scraping_summary

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
client = None

def get_system_prompt() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–∞—Ä—Å–∏–Ω–≥–µ."""
    current_date = datetime.now().strftime("%d.%m.%Y")
    scraping_info = get_scraping_summary()
    
    return f"""–í—ã ‚Äî –≤–µ–¥—É—â–∏–π —é—Ä–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å 15+ –≥–æ–¥–∞–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤ –ø—Ä–∞–≤–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É—è—Å—å —Å–ª–µ–¥—É—é—â–µ–π –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–µ–π:

1. –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞:
   - –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ:
     ‚Ä¢ –û—Ç—Ä–∞—Å–ª—å –ø—Ä–∞–≤–∞ (—Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞)
     ‚Ä¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
     ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—â–µ–≥–æ (–Ω–æ–≤–∏—á–æ–∫/—Å—Ç—É–¥–µ–Ω—Ç/–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª)
   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞ {current_date} —Å —É—á–µ—Ç–æ–º:
     ‚úì –ü–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞
     ‚úì –¢–µ–∫—É—â–µ–π –ø—Ä–∞–≤–æ–ø—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏

2. –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞:
   ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:
     1) –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–æ—Ä–º—ã (–ö–æ–¥–µ–∫—Å—ã/–ó–∞–∫–æ–Ω—ã/–ü–æ–¥–∑–∞–∫–æ–Ω–Ω—ã–µ –∞–∫—Ç—ã)
     2) –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≥–æ–¥–∞
     3) –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
   ‚Ä¢ –®–∫–∞–ª–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏:
     100% - –ø—Ä—è–º–∞—è –Ω–æ—Ä–º–∞ –∑–∞–∫–æ–Ω–∞
     80% - —É—Å—Ç–æ–π—á–∏–≤–∞—è —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
     60% - –¥–æ–∫—Ç—Ä–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ

3. –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç:
   [–î–ª—è –≥—Ä–∞–∂–¥–∞–Ω]
   - –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥ (–¥–æ 10 —Å–ª–æ–≤)
   - –û–±—ä—è—Å–Ω–µ–Ω–∏–µ "–Ω–∞ –ø–∞–ª—å—Ü–∞—Ö" (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
   - –ß–µ–∫-–ª–∏—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π

   [–î–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤]
   - –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å:
     ‚Ä¢ –†–∞–∑–±–æ—Ä–æ–º –∫–æ–ª–ª–∏–∑–∏–π
     ‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ–º —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –æ–ø—ã—Ç–æ–º
     ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–æ–º —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è

4. –ü—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
   ! –í–∞–∂–Ω–æ: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å:
   - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–ë
   - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
   - –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤

‚öñÔ∏è –ì–∞—Ä–∞–Ω—Ç–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–µ—Ä–∫–∞ —Å –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–∞–≤–æ–≤—ã–º –ø–æ—Ä—Ç–∞–ª–æ–º
‚Ä¢ –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —Å–ø–æ—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (‚ö°Ô∏è–¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è)
‚Ä¢ –ú–µ—Ö–∞–Ω–∏–∑–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏

 –î–∏—Å–∫–ª–µ–π–º–µ—Ä:
–û—Ç–≤–µ—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–ë –Ω–∞ –¥–∞—Ç—É: {scraping_info}
–ù–µ –∑–∞–º–µ–Ω—è—é—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (—Å—Ç. 1014 –ì–ö –†–ë)
"""

class LLMService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏."""
    
    def __init__(self, model: str = DEFAULT_MODEL):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å.
        
        Args:
            model: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ OpenAI
        """
        self.model = model
        self.client = None
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω LLM —Å–µ—Ä–≤–∏—Å —Å –º–æ–¥–µ–ª—å—é: {model}")
    
    def _get_client(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç OpenAI, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—è –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        if self.client is None:
            if not OPENAI_API_KEY or OPENAI_API_KEY.startswith("–í–ê–®_") or OPENAI_API_KEY.startswith("sk-test"):
                raise ValueError(
                    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π OPENAI_API_KEY –≤ —Ñ–∞–π–ª–µ .env. "
                    "–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://platform.openai.com/api-keys"
                )
            self.client = OpenAI(api_key=OPENAI_API_KEY)
        return self.client
    
    def get_answer(self, user_question: str, context_docs: List[Dict[str, Any]]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
        
        Args:
            user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context_docs: –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            context = self._format_context(context_docs)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_prompt = self._create_user_prompt(user_question, context, context_docs)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = self._get_client().chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": get_system_prompt()},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=MAX_TOKENS,
                temperature=0.3,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                top_p=0.9
            )
            
            answer = response.choices[0].message.content.strip()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
            usage = response.usage
            logger.info(f"ü§ñ OPENAI: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {usage.total_tokens} "
                       f"(–ø—Ä–æ–º–ø—Ç: {usage.prompt_tokens}, –æ—Ç–≤–µ—Ç: {usage.completion_tokens})")
            logger.info(f"üìù OPENAI: –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(answer)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return answer
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._get_error_response()
    
    def _format_context(self, docs: List[Dict[str, Any]]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞.
        
        Args:
            docs: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        if not docs:
            return "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        
        formatted_docs = []
        for i, doc in enumerate(docs, 1):
            content = doc.get('content', '')
            metadata = doc.get('metadata', {})
            title = metadata.get('title', f'–î–æ–∫—É–º–µ–Ω—Ç {i}')
            formatted_docs.append(f"–î–æ–∫—É–º–µ–Ω—Ç {i} ({title}):\n{content}")
        
        return "\n\n".join(formatted_docs)
    
    def _analyze_document_dates(self, context_docs: List[Dict[str, Any]]) -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏.
        
        Args:
            context_docs: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        """
        if not context_docs:
            return get_scraping_summary()
        
        from datetime import datetime, timezone, timedelta
        
        dates_with_time = []
        source_types = set()
        
        # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–°–ö (UTC+3)
        msk_tz = timezone(timedelta(hours=3))
        
        for doc in context_docs:
            metadata = doc.get('metadata', {})
            source_types.add(metadata.get('source_type', 'unknown'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–∞—Ç
            scraped_at = metadata.get('scraped_at')
            added_date = metadata.get('added_date')
            
            if scraped_at:
                try:
                    # –§–æ—Ä–º–∞—Ç: 20250712_170540
                    if len(scraped_at) >= 15:  # –ï—Å—Ç—å –≤—Ä–µ–º—è
                        date_obj = datetime.strptime(scraped_at, "%Y%m%d_%H%M%S")
                    else:  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
                        date_str = scraped_at[:8]
                        date_obj = datetime.strptime(date_str, "%Y%m%d")
                    
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –≤ –ú–°–ö (pravo.by - –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Å–∞–π—Ç)
                    date_obj = date_obj.replace(tzinfo=msk_tz)
                    dates_with_time.append(date_obj)
                except:
                    pass
            elif added_date:
                try:
                    # –§–æ—Ä–º–∞—Ç: 2025-07-12T17:05:40.373643
                    date_obj = datetime.fromisoformat(added_date.replace('Z', '+00:00'))
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–°–ö
                    date_obj = date_obj.astimezone(msk_tz)
                    dates_with_time.append(date_obj)
                except:
                    pass
        
        if not dates_with_time:
            return get_scraping_summary()
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∏ —Å–∞–º—É—é –Ω–æ–≤—É—é –¥–∞—Ç—É
        min_date = min(dates_with_time)
        max_date = max(dates_with_time)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º –ú–°–ö
        min_date_str = min_date.strftime("%d.%m.%Y %H:%M –ú–°–ö")
        max_date_str = max_date.strftime("%d.%m.%Y %H:%M –ú–°–ö")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if 'pravo.by_dynamic' in source_types:
            source_info = "–∏—Å—Ç–æ—á–Ω–∏–∫: pravo.by"
        elif len(source_types) == 1 and 'unknown' not in source_types:
            source_info = f"–∏—Å—Ç–æ—á–Ω–∏–∫: {list(source_types)[0]}"
        else:
            source_info = "—Å–º–µ—à–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        if min_date.date() == max_date.date():
            # –ï—Å–ª–∏ —Ç–∞ –∂–µ –¥–∞—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏
            if min_date == max_date:
                return f"{min_date_str} ({source_info})"
            else:
                date_str = min_date.strftime("%d.%m.%Y")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–∞ —Ä–∞–∑–Ω—ã–µ
                if min_date.time() == max_date.time():
                    return f"{date_str} {min_date.strftime('%H:%M')} –ú–°–ö ({source_info})"
                else:
                    time_range = f"{min_date.strftime('%H:%M')}-{max_date.strftime('%H:%M')} –ú–°–ö"
                    return f"{date_str} {time_range} ({source_info})"
        else:
            return f"{min_date_str} - {max_date_str} ({source_info})"

    def _create_user_prompt(self, question: str, context: str, context_docs: List[Dict[str, Any]] = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            context_docs: –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if context_docs:
            date_info = self._analyze_document_dates(context_docs)
        else:
            date_info = get_scraping_summary()
        
        return f"""
–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{question}"

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:
{context}

–ó–ê–î–ê–ß–ê: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:

1. –°–ò–°–¢–ï–ú–ù–´–ô –ê–ù–ê–õ–ò–ó:
   - –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–∞–≤–∞ –∏ –æ–±–æ—Å–Ω—É–π—Ç–µ –≤—ã–±–æ—Ä
   - –û—Ü–µ–Ω–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
   - –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ–≤–∏—á–æ–∫/—Å—Ç—É–¥–µ–Ω—Ç/–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª)

2. –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–ê–Ø –≠–ö–°–ü–ï–†–¢–ò–ó–ê:
   - –ü—Ä–∏–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–æ—Ä–º—ã (—Å—Ç–∞—Ç—å–∏, –∫–æ–¥–µ–∫—Å—ã, –∑–∞–∫–æ–Ω—ã)
   - –£–∫–∞–∂–∏—Ç–µ —à–∫–∞–ª—É –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ (100%/80%/60%)
   - –û—Ç–º–µ—Ç—å—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å

3. –ê–î–ê–ü–¢–ò–í–ù–´–ô –û–¢–í–ï–¢:
   - –î–ª—è –≥—Ä–∞–∂–¥–∞–Ω: –∏—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥ + –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ + —á–µ–∫-–ª–∏—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π
   - –î–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–∞–∑–±–æ—Ä–æ–º –∫–æ–ª–ª–∏–∑–∏–π

4. –ü–†–ï–í–ï–ù–¢–ò–í–ù–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–ë
   - –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤

–í–ê–ñ–ù–û: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–æ–º:
"‚öñÔ∏è –û—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–ë –Ω–∞ –¥–∞—Ç—É: {date_info}. –ù–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (—Å—Ç. 1014 –ì–ö –†–ë)."
"""
    
    def _get_error_response(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Returns:
            –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        return """
üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:
1. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
2. –ó–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
3. –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ–∑–∂–µ

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
"""
    
    def get_model_info(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏.
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        """
        return {
            "model": self.model,
            "max_tokens": MAX_TOKENS,
            "temperature": 0.3
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä LLM —Å–µ—Ä–≤–∏—Å–∞
_llm_service = None

def get_llm_service() -> LLMService:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä LLM —Å–µ—Ä–≤–∏—Å–∞."""
    global _llm_service
    if _llm_service is None:
        _llm_service = LLMService()
    return _llm_service

def get_answer(user_question: str, context_docs: List[Dict[str, Any]]) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM.
    
    Args:
        user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context_docs: –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        
    Returns:
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    """
    llm_service = get_llm_service()
    return llm_service.get_answer(user_question, context_docs) 