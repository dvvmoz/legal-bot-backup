"""
Базовый класс для юридических фильтров.
Содержит общие ключевые слова и методы для фильтрации юридического контента.
"""
import re
import logging
from typing import Dict, List, Set
from abc import ABC, abstractmethod

logger = logging.getLogger(__name__)

class BaseLegalFilter(ABC):
    """Базовый класс для юридических фильтров."""
    
    def __init__(self):
        """Инициализирует базовый фильтр."""
        self.legal_keywords = self._get_shared_legal_keywords()
        self.belarus_keywords = self._get_belarus_keywords()
        self.non_legal_patterns = self._get_shared_non_legal_patterns()
        
    def _get_shared_legal_keywords(self) -> Set[str]:
        """Возвращает общие юридические ключевые слова."""
        return {
            # Основные юридические термины
            'закон', 'право', 'кодекс', 'статья', 'пункт', 'часть', 'глава',
            'постановление', 'указ', 'декрет', 'решение', 'определение',
            'суд', 'судья', 'иск', 'истец', 'ответчик', 'договор', 'соглашение',
            'ответственность', 'обязанность', 'права', 'обязательство', 'нарушение',
            'штраф', 'наказание', 'санкция', 'взыскание', 'юрист', 'адвокат',
            'нотариус', 'прокурор', 'следователь', 'судебный', 'правовой',
            'юридический', 'законный', 'незаконный', 'правомерный', 'неправомерный',
            
            # Процессуальные термины
            'заявление', 'жалоба', 'апелляция', 'кассация', 'исполнение',
            'процедура', 'порядок', 'срок', 'документ', 'справка', 'разрешение',
            'лицензия', 'регистрация', 'уведомление', 'протокол', 'акт',
            
            # Отрасли права
            'гражданский', 'трудовой', 'уголовный', 'административный',
            'семейный', 'жилищный', 'хозяйственный', 'налоговый', 'финансовый',
            'конституционный', 'земельный', 'экологический', 'банковский',
            'страховой', 'авторский', 'патентный', 'наследственный',
            
            # Субъекты права
            'физическое лицо', 'юридическое лицо', 'индивидуальный предприниматель',
            'организация', 'учреждение', 'предприятие', 'общество', 'товарищество',
            'государственный орган', 'местный орган', 'должностное лицо',
            
            # Имущественные отношения
            'собственность', 'владение', 'пользование', 'распоряжение',
            'наследство', 'завещание', 'дарение', 'купля', 'продажа',
            'аренда', 'найм', 'ипотека', 'залог', 'поручительство',
            
            # Трудовые отношения
            'работник', 'работодатель', 'трудовой договор', 'увольнение',
            'отпуск', 'зарплата', 'больничный', 'декрет', 'пенсия',
            
            # Семейные отношения
            'брак', 'развод', 'алименты', 'опека', 'попечительство',
            'усыновление', 'супруг', 'супруга', 'ребенок', 'дети',
            
            # Потребительские права
            'потребитель', 'товар', 'услуга', 'качество', 'гарантия',
            'возврат', 'обмен', 'претензия', 'защита прав', 'возмещение',
            'компенсация', 'ущерб', 'вред', 'моральный вред',
            
            # Административные правонарушения
            'штраф', 'нарушение', 'правила', 'дорожное движение',
            'парковка', 'превышение скорости', 'дтп', 'авария', 'страхование',
            
            # Документы
            'паспорт', 'удостоверение', 'свидетельство', 'сертификат',
            'виза', 'патент', 'торговый знак', 'лицензия'
        }
    
    def _get_belarus_keywords(self) -> Set[str]:
        """Возвращает ключевые слова, специфичные для Беларуси."""
        return {
            'республика беларусь', 'беларусь', 'рб', 'белорусский',
            'минск', 'облисполком', 'горисполком', 'сельсовет', 'райисполком',
            'нацбанк', 'белстат', 'фсзн', 'совет министров', 'президент рб',
            'парламент', 'палата представителей', 'совет республики',
            'конституционный суд', 'верховный суд', 'министерство юстиции',
            'генеральная прокуратура', 'национальный банк',
            'комитет государственного контроля', 'базовая величина',
            'белорусские рубли', 'трудовой кодекс рб', 'гражданский кодекс рб',
            'кодекс об административных правонарушениях', 'уголовный кодекс рб'
        }
    
    def _get_shared_non_legal_patterns(self) -> List[str]:
        """Возвращает общие паттерны для исключения нерелевантного контента."""
        return [
            r'рецепт', r'кулинар', r'готовить', r'приготовление',
            r'спорт', r'футбол', r'хоккей', r'баскетбол',
            r'погода', r'гороскоп', r'астрология',
            r'развлечения', r'кино', r'музыка', r'игры',
            r'мода', r'красота', r'косметика',
            r'здоровье', r'медицина', r'лечение', r'болезнь',
            r'диета', r'похудение', r'фитнес',
            r'туризм', r'путешествие', r'отдых', r'отпуск',
            r'реклама', r'скидка', r'распродажа', r'акция',
            r'технологии', r'компьютер', r'интернет', r'программирование',
            r'социальные сети', r'блог', r'влоггер',
            r'автомобиль', r'машина', r'ремонт авто',
            r'недвижимость', r'квартира', r'дом', r'ремонт',
            r'образование', r'школа', r'университет', r'экзамены',
            r'работа', r'вакансии', r'резюме', r'карьера'
        ]
    
    def _calculate_belarus_bonus(self, text: str) -> float:
        """Вычисляет бонус за белорусскую специфику."""
        belarus_score = 0.0
        text_lower = text.lower()
        
        for keyword in self.belarus_keywords:
            if keyword in text_lower:
                belarus_score += 0.1
        
        return min(belarus_score, 0.3)  # Максимум 30% бонуса
    
    def _check_non_legal_content(self, text: str) -> bool:
        """Проверяет, содержит ли текст нерелевантный контент."""
        text_lower = text.lower()
        
        for pattern in self.non_legal_patterns:
            if re.search(pattern, text_lower):
                return True
        
        return False
    
    def _count_legal_keywords(self, text: str) -> int:
        """Подсчитывает количество юридических ключевых слов в тексте."""
        text_lower = text.lower()
        count = 0
        
        for keyword in self.legal_keywords:
            if keyword in text_lower:
                count += 1
        
        return count
    
    def _has_legal_structure(self, text: str) -> bool:
        """Проверяет, имеет ли текст структуру юридического документа."""
        legal_structure_patterns = [
            r'стать[яи]\s*\d+',  # статья 123
            r'пункт\s*\d+',      # пункт 5
            r'част[ьи]\s*\d+',   # часть 2
            r'глав[ае]\s*\d+',   # глава 10
            r'раздел\s*\d+',     # раздел III
            r'№\s*\d+',          # № 123
            r'от\s*\d{1,2}\.\d{1,2}\.\d{4}',  # от 12.05.2023
            r'в редакции',       # в редакции
            r'с изменениями',    # с изменениями
            r'в соответствии с', # в соответствии с
            r'согласно',         # согласно
            r'на основании',     # на основании
        ]
        
        for pattern in legal_structure_patterns:
            if re.search(pattern, text.lower()):
                return True
        
        return False
    
    @abstractmethod
    def is_legal(self, text: str, **kwargs) -> tuple[bool, float, str]:
        """
        Определяет, является ли текст юридически релевантным.
        
        Args:
            text: Текст для анализа
            **kwargs: Дополнительные параметры
            
        Returns:
            Tuple[bool, float, str]: (является_юридическим, балл, объяснение)
        """
        pass
    
    def get_statistics(self) -> Dict:
        """Возвращает статистику фильтра."""
        return {
            'legal_keywords_count': len(self.legal_keywords),
            'belarus_keywords_count': len(self.belarus_keywords),
            'non_legal_patterns_count': len(self.non_legal_patterns),
            'filter_type': self.__class__.__name__
        } 