"""
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ML-—Ñ–∏–ª—å—Ç—Ä–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π.
"""
import time
import logging
from typing import Dict, Any, Tuple, Optional
from datetime import datetime

from .user_analytics import log_user_question

logger = logging.getLogger(__name__)

class MLAnalyticsIntegrator:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π workflow."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
        self.session_cache = {}  # –ö–µ—à —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä ML-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def track_question_processing(self, user_id: int, question_text: str, 
                                ml_result: Tuple[bool, float, str]) -> Dict[str, Any]:
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            question_text: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            ml_result: –†–µ–∑—É–ª—å—Ç–∞—Ç ML-—Ñ–∏–ª—å—Ç—Ä–∞
            
        Returns:
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        start_time = time.time()
        session_id = self._get_or_create_session(user_id)
        
        context = {
            'user_id': user_id,
            'question_text': question_text,
            'ml_result': ml_result,
            'session_id': session_id,
            'start_time': start_time,
            'timestamp': datetime.now().isoformat()
        }
        
        is_legal, confidence, explanation = ml_result
        logger.info(f"üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, ML: {is_legal} ({confidence:.3f})")
        
        return context
    
    def track_search_results(self, context: Dict[str, Any], relevant_docs: list, 
                           best_distance: float = None, source_type: str = "knowledge_base") -> Dict[str, Any]:
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
            relevant_docs: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            best_distance: –õ—É—á—à–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –ø–æ–∏—Å–∫–∞
            source_type: –¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ('knowledge_base', 'dynamic_search')
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        docs_count = len(relevant_docs) if relevant_docs else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        quality = "unknown"
        if best_distance is not None:
            if best_distance < 0.3:
                quality = "excellent"
            elif best_distance < 0.5:
                quality = "good"
            elif best_distance < 0.8:
                quality = "satisfactory"
            else:
                quality = "poor"
        
        search_results = {
            'docs_count': docs_count,
            'best_distance': best_distance,
            'quality': quality,
            'source_type': source_type
        }
        
        context['search_results'] = search_results
        
        logger.info(f"üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê: –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context['user_id']}: "
                   f"{docs_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–∞—á–µ—Å—Ç–≤–æ: {quality}")
        
        return context
    
    def track_response_completion(self, context: Dict[str, Any], response_text: str = None,
                                error: str = None) -> int:
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
            response_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            error: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞)
            
        Returns:
            ID –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        """
        end_time = time.time()
        processing_time = int((end_time - context['start_time']) * 1000)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        response_info = {
            'response_length': len(response_text) if response_text else 0,
            'processing_time_ms': processing_time,
            'has_error': error is not None,
            'error_message': error
        }
        
        context['response_info'] = response_info
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        try:
            analytics_id = log_user_question(
                user_id=context['user_id'],
                question_text=context['question_text'],
                ml_result=context['ml_result'],
                search_results=context.get('search_results'),
                response_info=response_info,
                session_id=context['session_id']
            )
            
            is_legal, confidence, _ = context['ml_result']
            logger.info(f"üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context['user_id']} "
                       f"(ID: {analytics_id}, –≤—Ä–µ–º—è: {processing_time}–º—Å)")
            
            return analytics_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return -1
    
    def _get_or_create_session(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        current_hour = datetime.now().strftime('%Y%m%d_%H')
        session_key = f"{user_id}_{current_hour}"
        
        if session_key not in self.session_cache:
            self.session_cache[session_key] = f"session_{session_key}"
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            self._cleanup_old_sessions()
        
        return self.session_cache[session_key]
    
    def _cleanup_old_sessions(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –∫–µ—à–∞."""
        current_time = datetime.now()
        to_remove = []
        
        for session_key in self.session_cache:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –∫–ª—é—á–∞ —Å–µ—Å—Å–∏–∏
                time_part = session_key.split('_')[-2] + '_' + session_key.split('_')[-1]
                session_time = datetime.strptime(time_part, '%Y%m%d_%H')
                
                # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
                if (current_time - session_time).total_seconds() > 86400:  # 24 —á–∞—Å–∞
                    to_remove.append(session_key)
            except:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è, —É–¥–∞–ª—è–µ–º
                to_remove.append(session_key)
        
        for key in to_remove:
            del self.session_cache[key]
    
    def get_session_stats(self, user_id: int) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        from .user_analytics import get_analytics
        
        try:
            session_id = self._get_or_create_session(user_id)
            analytics = get_analytics()
            
            import sqlite3
            with sqlite3.connect(analytics.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT 
                        COUNT(*) as questions_count,
                        AVG(ml_confidence) as avg_confidence,
                        COUNT(CASE WHEN source_type = 'dynamic_search' THEN 1 END) as dynamic_searches
                    FROM user_questions 
                    WHERE session_id = ? AND user_id = ?
                """, [session_id, user_id])
                
                stats = cursor.fetchone()
                
                return {
                    'session_id': session_id,
                    'questions_count': stats[0] or 0,
                    'avg_confidence': round(stats[1] or 0, 3),
                    'dynamic_searches': stats[2] or 0
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
            return {'error': str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
_integrator_instance = None

def get_ml_analytics_integrator() -> MLAnalyticsIntegrator:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    global _integrator_instance
    if _integrator_instance is None:
        _integrator_instance = MLAnalyticsIntegrator()
    return _integrator_instance

def create_question_context(user_id: int, question_text: str, ml_result: Tuple[bool, float, str]) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞."""
    return get_ml_analytics_integrator().track_question_processing(user_id, question_text, ml_result)

def update_search_context(context: Dict[str, Any], relevant_docs: list, 
                         best_distance: float = None, source_type: str = "knowledge_base") -> Dict[str, Any]:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∏—Å–∫–µ."""
    return get_ml_analytics_integrator().track_search_results(context, relevant_docs, best_distance, source_type)

def finalize_question_context(context: Dict[str, Any], response_text: str = None, 
                             error: str = None) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–ø—Ä–æ—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É."""
    return get_ml_analytics_integrator().track_response_completion(context, response_text, error)

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å bot_handler.py
def create_question_context(question_text: str, user_id: int) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞.
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è bot_handler.py.
    
    Args:
        question_text: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        ID –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    """
    import uuid
    context_id = str(uuid.uuid4())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∫–µ—à–µ
    integrator = get_ml_analytics_integrator()
    integrator.session_cache[context_id] = {
        'user_id': user_id,
        'question_text': question_text,
        'start_time': time.time(),
        'timestamp': datetime.now().isoformat()
    }
    
    return context_id

def finalize_question_context(context_id: str, accepted: bool, ml_confidence: float = None, 
                             ml_explanation: str = None, search_quality: str = None, 
                             answer_source: str = None) -> None:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞.
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è bot_handler.py.
    
    Args:
        context_id: ID –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        accepted: –ë—ã–ª –ª–∏ –ø—Ä–∏–Ω—è—Ç –≤–æ–ø—Ä–æ—Å
        ml_confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ML-—Ñ–∏–ª—å—Ç—Ä–∞
        ml_explanation: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ ML-—Ñ–∏–ª—å—Ç—Ä–∞
        search_quality: –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞
        answer_source: –ò—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–≤–µ—Ç–∞
    """
    try:
        from .user_analytics import get_analytics
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∫–µ—à–∞
        integrator = get_ml_analytics_integrator()
        context = integrator.session_cache.get(context_id)
        
        if not context:
            logger.error(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç {context_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        analytics = get_analytics()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        user_id = context['user_id']
        question_text = context['question_text']
        ml_result = (accepted, ml_confidence or 0.0, ml_explanation or "")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        search_results = None
        if search_quality:
            search_results = {
                'quality': search_quality,
                'source_type': answer_source or 'unknown'
            }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        analytics.log_question(
            user_id=user_id,
            question_text=question_text,
            ml_result=ml_result,
            search_results=search_results,
            session_id=context_id
        )
            
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∫–µ—à–∞
        del integrator.session_cache[context_id]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")

def get_analytics_summary() -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ML-—Ñ–∏–ª—å—Ç—Ä–∞.
    
    Returns:
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    try:
        from .user_analytics import get_analytics
        
        analytics = get_analytics()
        stats = analytics.get_analytics_summary(days=30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        if 'error' in stats:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats['error']}"
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        total_all = stats['total_questions'] + stats['rejected_questions']
        acceptance_rate = (stats['total_questions'] / total_all * 100) if total_all > 0 else 0
        rejection_rate = (stats['rejected_questions'] / total_all * 100) if total_all > 0 else 0
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        summary = f"""üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ML-—Ñ–∏–ª—å—Ç—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π**

**üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_all}
‚Ä¢ –ü—Ä–∏–Ω—è—Ç–æ: {stats['total_questions']} ({acceptance_rate:.1f}%)
‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected_questions']} ({rejection_rate:.1f}%)

**üéØ –¢–æ—á–Ω–æ—Å—Ç—å ML-—Ñ–∏–ª—å—Ç—Ä–∞:**
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—ã—Ö: {stats['avg_confidence']:.3f}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {stats['avg_rejected_confidence']:.3f}
‚Ä¢ –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (>0.9): {stats['high_confidence_count']}
‚Ä¢ –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (<0.7): {stats['low_confidence_count']}

**üîç –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞:**
‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∏—Å–∫–æ–≤: {stats['dynamic_searches']}

**üìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category_data in stats['top_categories']:
            summary += f"\n‚Ä¢ {category_data['category']}: {category_data['count']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'ml_accuracy_estimate' in stats and stats['ml_accuracy_estimate']:
            accuracy = stats['ml_accuracy_estimate']
            summary += f"""

**‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy.get('accuracy_estimate', 0):.1f}%
‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫: {accuracy.get('potential_errors', 0)}"""
        
        return summary.strip()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏" 