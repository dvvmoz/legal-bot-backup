#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ ChromaDB.
"""
# –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é ChromaDB –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.parent))
import disable_telemetry

import os
import logging
from pathlib import Path
from typing import List, Dict, Any, Optional
from datetime import datetime
import hashlib

# –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é ChromaDB –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
os.environ["ANONYMIZED_TELEMETRY"] = "False"
os.environ["CHROMA_TELEMETRY"] = "False"

import chromadb
from chromadb.config import Settings
from chromadb.utils import embedding_functions
from config import CHROMA_DB_PATH

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ ChromaDB
telemetry_logger = logging.getLogger('chromadb.telemetry')
telemetry_logger.setLevel(logging.CRITICAL)
telemetry_logger.addHandler(logging.NullHandler())

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ posthog
posthog_logger = logging.getLogger('chromadb.telemetry.product.posthog')
posthog_logger.setLevel(logging.CRITICAL)
posthog_logger.addHandler(logging.NullHandler())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

class KnowledgeBase:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π."""
    
    def __init__(self, collection_name: str = "legal_docs"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
        
        Args:
            collection_name: –ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ ChromaDB
        """
        self.collection_name = collection_name
        self.client = None
        self.collection = None
        self._initialize_db()
    
    def _initialize_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ChromaDB."""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(CHROMA_DB_PATH, exist_ok=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç ChromaDB
            self.client = chromadb.PersistentClient(
                path=CHROMA_DB_PATH,
                settings=Settings(
                    anonymized_telemetry=False,
                    allow_reset=True,
                    is_persistent=True
                )
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
            self.collection = self.client.get_or_create_collection(
                name=self.collection_name,
                metadata={"hnsw:space": "cosine"}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
            )
            
            logger.info(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.collection_name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            raise
    
    def add_document(self, doc_id: str, document_text: str, metadata: Dict[str, Any] = None) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
        
        Args:
            doc_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
            document_text: –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            if not document_text or not document_text.strip():
                logger.warning(f"–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_id}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID
            if self.document_exists(doc_id):
                logger.debug(f"–î–æ–∫—É–º–µ–Ω—Ç {doc_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False
            
            if metadata is None:
                metadata = {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata.update({
                "length": len(document_text),
                "doc_id": doc_id,
                "added_date": datetime.now().isoformat()
            })
            
            self.collection.add(
                documents=[document_text],
                metadatas=[metadata],
                ids=[doc_id]
            )
            
            logger.debug(f"–î–æ–∫—É–º–µ–Ω—Ç {doc_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_id}: {e}")
            return False
    
    def search_relevant_docs(self, query_text: str, n_results: int = 3) -> List[Dict[str, Any]]:
        """
        –ò—â–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É.
        
        Args:
            query_text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            n_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            if not query_text or not query_text.strip():
                logger.warning("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collection_count = self.collection.count()
            if collection_count == 0:
                logger.warning("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞")
                return []
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            n_results = min(n_results, collection_count)
            
            results = self.collection.query(
                query_texts=[query_text],
                n_results=n_results
            )
            
            documents = results.get('documents', [[]])[0]
            distances = results.get('distances', [[]])[0]
            metadatas = results.get('metadatas', [[]])[0]
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            # –î–ª—è –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: 0.0-0.3 –æ—Ç–ª–∏—á–Ω–æ, 0.3-0.5 —Ö–æ—Ä–æ—à–æ, 0.5-0.8 —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ, >0.8 –ø–ª–æ—Ö–æ
            relevant_docs = []
            for i, (doc, distance) in enumerate(zip(documents, distances)):
                if distance < 0.9:  # –ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (—Å–ª–µ–≥–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è)
                    metadata = metadatas[i] if i < len(metadatas) and metadatas[i] else {}
                    relevant_docs.append({
                        'content': doc,
                        'metadata': metadata,
                        'distance': distance
                    })
            
            logger.info(f"üìä –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô: –ù–∞–π–¥–µ–Ω–æ {len(relevant_docs)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query_text[:50]}...'")
            if distances:
                avg_distance = sum(distances) / len(distances)
                min_distance = min(distances)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–∞ —à–∫–∞–ª–∞ –¥–ª—è –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞ pravo.by)
                if min_distance < 0.3:
                    quality = "–æ—Ç–ª–∏—á–Ω–æ–µ"
                elif min_distance < 0.5:
                    quality = "—Ö–æ—Ä–æ—à–µ–µ"
                elif min_distance < 0.8:
                    quality = "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
                else:
                    quality = "—Å–ª–∞–±–æ–µ"
                
                logger.info(f"üìà –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô: –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {avg_distance:.3f}, –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {min_distance:.3f} ({quality} –∫–∞—á–µ—Å—Ç–≤–æ)")
            return relevant_docs
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return []
    
    def should_use_dynamic_search(self, query_text: str, n_results: int = 3) -> tuple[bool, List[Dict[str, Any]]]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        
        Args:
            query_text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            n_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–Ω—É–∂–µ–Ω_–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π_–ø–æ–∏—Å–∫, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ_–¥–æ–∫—É–º–µ–Ω—Ç—ã)
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
            relevant_docs = self.search_relevant_docs(query_text, n_results)
            
            # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç —Å–æ–≤—Å–µ–º
            if not relevant_docs:
                logger.info(f"üîç –†–ï–®–ï–ù–ò–ï: –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫")
                return True, []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            best_distance = min(doc['distance'] for doc in relevant_docs)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            query_lower = query_text.lower()
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            procedural_keywords = [
                '–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å', '–∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å', '–∫–∞–∫ –ø–æ–¥–∞—Ç—å', '–∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å',
                '–∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', '–∫–∞–∫–∏–µ —Å–ø—Ä–∞–≤–∫–∏', '–≥–¥–µ –ø–æ–ª—É—á–∏—Ç—å', '–∫—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è',
                '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞', '–ø–æ—Ä—è–¥–æ–∫', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', '–ø–æ—à–∞–≥–æ–≤–æ', '–∞–ª–≥–æ—Ä–∏—Ç–º',
                '–ª–∏—Ü–µ–Ω–∑–∏—è', '—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ', '—Å–ø—Ä–∞–≤–∫–∞', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ'
            ]
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –±–æ—Ç–µ
            bot_keywords = [
                '–±–æ—Ç', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç', '–Ω–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è', '–æ—à–∏–±–∫–∞',
                'pravo.by', '—Å–∞–π—Ç', '–ø–æ–∏—Å–∫', '–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π'
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–º –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º
            is_procedural = any(keyword in query_lower for keyword in procedural_keywords)
            is_bot_related = any(keyword in query_lower for keyword in bot_keywords)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å –æ –±–æ—Ç–µ, –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            if is_bot_related:
                logger.info(f"üîç –†–ï–®–ï–ù–ò–ï: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –æ –±–æ—Ç–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
                return False, relevant_docs
            
            # –î–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            if is_procedural:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                best_doc_content = relevant_docs[0]['content'].lower()
                procedural_content_keywords = [
                    '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞', '–ø–æ—Ä—è–¥–æ–∫', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–ø–æ—à–∞–≥–æ–≤–æ',
                    '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '—Å–ø—Ä–∞–≤–∫–∞', '–∑–∞—è–≤–ª–µ–Ω–∏–µ', '–ø–æ–¥–∞—á–∞', '–ø–æ–ª—É—á–µ–Ω–∏–µ',
                    '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ', '–ª–∏—Ü–µ–Ω–∑–∏—è', '—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ'
                ]
                
                has_procedural_content = any(keyword in best_doc_content for keyword in procedural_content_keywords)
                
                if not has_procedural_content or best_distance > 0.35:
                    logger.info(f"üîç –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å –±–µ–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {best_distance:.3f}) - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫")
                    return True, relevant_docs
                else:
                    logger.info(f"üîç –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {best_distance:.3f}) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
                    return False, relevant_docs
            
            # –î–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä–æ–≥
            if best_distance > 0.6:
                logger.info(f"üîç –†–ï–®–ï–ù–ò–ï: –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {best_distance:.3f}) - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫")
                return True, relevant_docs
            
            # –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ö–æ—Ä–æ—à–µ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            logger.info(f"üîç –†–ï–®–ï–ù–ò–ï: –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {best_distance:.3f}) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
            return False, relevant_docs
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ñ–ª–∞–≥ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
            return True, []
    
    def document_exists(self, doc_id: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.
        
        Args:
            doc_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ ID
            result = self.collection.get(ids=[doc_id])
            return len(result.get('ids', [])) > 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_id}: {e}")
            return False
    
    def get_collection_stats(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            count = self.collection.count()
            return {
                "total_documents": count,
                "collection_name": self.collection_name,
                "db_path": CHROMA_DB_PATH
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}
    
    def delete_document(self, doc_id: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
        
        Args:
            doc_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self.collection.delete(ids=[doc_id])
            logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç {doc_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_id}: {e}")
            return False
    
    def clear_collection(self) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é.
        
        Returns:
            True –µ—Å–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è –æ—á–∏—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            self.client.delete_collection(name=self.collection_name)
            self.collection = self.client.create_collection(
                name=self.collection_name,
                metadata={"hnsw:space": "cosine"}
            )
            logger.info("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
_knowledge_base = None

def get_knowledge_base() -> KnowledgeBase:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."""
    global _knowledge_base
    if _knowledge_base is None:
        _knowledge_base = KnowledgeBase()
    return _knowledge_base

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
def add_document(doc_id: str, document_text: str, metadata: Dict[str, Any] = None) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π."""
    return get_knowledge_base().add_document(doc_id, document_text, metadata)

def search_relevant_docs(query_text: str, n_results: int = 3) -> List[Dict[str, Any]]:
    """–ò—â–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã."""
    return get_knowledge_base().search_relevant_docs(query_text, n_results) 

def should_use_dynamic_search(query_text: str, n_results: int = 3) -> tuple[bool, List[Dict[str, Any]]]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫."""
    return get_knowledge_base().should_use_dynamic_search(query_text, n_results) 

def document_exists(doc_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."""
    return get_knowledge_base().document_exists(doc_id) 