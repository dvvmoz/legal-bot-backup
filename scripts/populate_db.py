#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ PDF –∏ Word —Ñ–∞–π–ª–æ–≤.
"""
import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from config import load_config
from modules.text_processing import (
    extract_text_from_document, 
    split_text_into_structure, 
    get_supported_extensions,
    is_supported_document
)
from modules.knowledge_base import add_document, get_knowledge_base

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/add_scraped_to_knowledge_base.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def update_document_file(file_path: str, source_folder: str = "data/documents") -> int:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π, —É–¥–∞–ª—è—è —Å—Ç–∞—Ä—ã–µ –±–ª–æ–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        source_folder: –ü–∞–ø–∫–∞-–∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
    """
    try:
        filename = os.path.basename(file_path)
        file_extension = Path(file_path).suffix.lower()
        base_name = os.path.splitext(filename)[0]
        
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è—é —Ñ–∞–π–ª: {filename} (—Ñ–æ—Ä–º–∞—Ç: {file_extension})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        if not is_supported_document(file_path):
            logger.warning(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")
            return 0
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        kb = get_knowledge_base()
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–ª–æ–∫–∏ —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        deleted_count = 0
        block_index = 0
        while True:
            doc_id = f"{base_name}_block_{block_index:03d}"
            if kb.document_exists(doc_id):
                if kb.delete_document(doc_id):
                    deleted_count += 1
                block_index += 1
            else:
                break
        
        if deleted_count > 0:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –±–ª–æ–∫–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {filename}")
        
        # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
        added_count = process_document_file(file_path, source_folder)
        
        if added_count > 0:
            logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {filename} –æ–±–Ω–æ–≤–ª–µ–Ω: —É–¥–∞–ª–µ–Ω–æ {deleted_count}, –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –±–ª–æ–∫–æ–≤")
        
        return added_count
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return 0

def process_document_file(file_path: str, source_folder: str = "data/documents") -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ (PDF, DOCX, DOC) –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        source_folder: –ü–∞–ø–∫–∞-–∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    try:
        filename = os.path.basename(file_path)
        file_extension = Path(file_path).suffix.lower()
        
        logger.info(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {filename} (—Ñ–æ—Ä–º–∞—Ç: {file_extension})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        if not is_supported_document(file_path):
            logger.warning(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")
            return 0
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        try:
            full_text = extract_text_from_document(file_path)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ {filename}: {e}")
            return 0
        
        if not full_text.strip():
            logger.warning(f"‚ùå –§–∞–π–ª {filename} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞")
            return 0
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏
        text_blocks = split_text_into_structure(full_text)
        
        if not text_blocks:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ {filename}")
            return 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        added_count = 0
        base_name = os.path.splitext(filename)[0]
        
        for i, block in enumerate(text_blocks):
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
            doc_id = f"{base_name}_block_{i:03d}"
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–∫–∞
            metadata = {
                "source_file": filename,
                "source_folder": source_folder,
                "file_type": file_extension,
                "block_index": i,
                "total_blocks": len(text_blocks),
                "block_length": len(block)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            if add_document(doc_id, block, metadata):
                added_count += 1
            else:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫ {i} –∏–∑ —Ñ–∞–π–ª–∞ {filename}")
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –±–ª–æ–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ {filename}")
        return added_count
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return 0

def populate_from_directory(data_dir: str = "data/documents") -> dict:
    """
    –ù–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    
    Args:
        data_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        
    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    stats = {
        "total_files": 0,
        "processed_files": 0,
        "total_blocks": 0,
        "failed_files": [],
        "file_types": {}
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(data_dir):
        logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {data_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return stats
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    supported_extensions = get_supported_extensions()
    document_files = []
    
    for filename in os.listdir(data_dir):
        file_path = os.path.join(data_dir, filename)
        if os.path.isfile(file_path) and is_supported_document(file_path):
            document_files.append(filename)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
            file_ext = Path(filename).suffix.lower()
            stats["file_types"][file_ext] = stats["file_types"].get(file_ext, 0) + 1
    
    if not document_files:
        logger.warning(f"‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {data_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        logger.info(f"üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(supported_extensions)}")
        return stats
    
    stats["total_files"] = len(document_files)
    logger.info(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(document_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    logger.info(f"üìä –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤: {dict(stats['file_types'])}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for filename in document_files:
        file_path = os.path.join(data_dir, filename)
        
        blocks_added = process_document_file(file_path, data_dir)
        
        if blocks_added > 0:
            stats["processed_files"] += 1
            stats["total_blocks"] += blocks_added
        else:
            stats["failed_files"].append(filename)
    
    return stats

def show_statistics(stats: dict):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤.
    
    Args:
        stats: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    print("\n" + "="*60)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –§–ê–ô–õ–û–í")
    print("="*60)
    
    print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {stats['total_files']}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['processed_files']}")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {len(stats['failed_files'])}")
    print(f"üìù –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –±–ª–æ–∫–æ–≤: {stats['total_blocks']}")
    
    if stats.get('file_types'):
        print(f"\nüìã –¢–∏–ø—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
        for file_type, count in stats['file_types'].items():
            print(f"  {file_type}: {count} —Ñ–∞–π–ª–æ–≤")
    
    if stats['failed_files']:
        print(f"\n‚ùå –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
        for filename in stats['failed_files']:
            print(f"  ‚Ä¢ {filename}")
    
    print("\n" + "="*60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        load_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ data/documents
        data_dir = "data/documents"
        if not os.path.exists(data_dir):
            logger.info(f"üìÅ –°–æ–∑–¥–∞—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {data_dir}")
            os.makedirs(data_dir, exist_ok=True)
            
            supported_formats = get_supported_extensions()
            logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {data_dir} —Å–æ–∑–¥–∞–Ω–∞.")
            logger.info(f"üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(supported_formats)}")
            logger.info(f"üìÑ –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫—É {data_dir} –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        supported_formats = get_supported_extensions()
        logger.info(f"üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {', '.join(supported_formats)}")
        
        # –ù–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        stats = populate_from_directory(data_dir)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        show_statistics(stats)
        
        if stats["processed_files"] > 0:
            logger.info("‚úÖ –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {stats['processed_files']} —Ñ–∞–π–ª–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–æ {stats['total_blocks']} –±–ª–æ–∫–æ–≤")
        else:
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
            
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 